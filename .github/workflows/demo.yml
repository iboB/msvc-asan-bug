# Copyright (c) Borislav Stanimirov
# SPDX-License-Identifier: MIT
#
name: Demo
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]
jobs:
  demo:
    name: ${{ matrix.cfg.name }}
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      matrix:
        cfg:
          # ubuntu sanitizing address, undefined, leak, thread
          - {name: 'linux gcc dbg s:addr,ub,leak', os: ubuntu-latest, btype: Debug, cmakeflags: '-DSAN_ADDR=1 -DSAN_UB=1 -DSAN_LEAK=1', buildflags: '-- -j'}
          - {name: 'linux gcc rel s:addr,ub,leak', os: ubuntu-latest, btype: RelWithDebInfo, cmakeflags: '-DSAN_ADDR=1 -DSAN_UB=1 -DSAN_LEAK=1', buildflags: '-- -j'}
          - {name: 'win msvc dbg s:addr', os: windows-latest, btype: Debug, cmakeflags: '-DSAN_ADDR=1', buildflags: ''}
          - {name: 'win msvc rel s:addr', os: windows-latest, btype: RelWithDebInfo, cmakeflags: '-DSAN_ADDR=1', buildflags: ''}
    defaults:
      run:
        working-directory: ci
    steps:
      - name: Clone
        uses: actions/checkout@v3
      - name: VC Vars
        # Setup vcvars on Windows
        # MSVC's address sanitizer attaches dependencies to several DLLs which are not in PATH
        # vcvars will add them to PATH and allow msvc asan executables to run
        if: matrix.cfg.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1
      - name: Configure
        run: cmake .. -DCMAKE_BUILD_TYPE=${{ matrix.cfg.btype }} ${{ matrix.cfg.cmakeflags }}
      - name: Demo
        continue-on-error: true
        run: cmake --build . --config ${{ matrix.cfg.btype }} --target=run-demo ${{ matrix.cfg.buildflags }}
